# $Id$
PortSystem	1.0

name				macvim
version				20110919
revision			0
categories			editors
platforms			darwin
maintainers			nomaintainer
description			MacVim is a port of the text editor Vim to Mac OS X.
long_description	MacVim supports multiple windows with tabbed editing and a host of other features. \
					MacVim brings you the full power of Vim to Mac OS X.
homepage			http://code.google.com/p/macvim-kaoriya/

master_sites		http://github.com/splhack/macvim/tarball
checksums			sha1 d3859092884afa6346f92eef6babaf203973570a
distfiles			${version}
worksrcdir			macvim/src

depends_lib			port:cmigemo \
					port:gettext \
					port:libiconv \
					port:ncurses

configure.pre_args	--prefix=${applications_dir}
configure.args		--with-features=huge \
					--enable-multibyte \
					--enable-netbeans \
					--with-tlib=ncurses
configure.cppflags	-I${prefix}/include
configure.ldflags	-L${prefix}/lib -headerpad_max_install_names
set configmk		${worksrcpath}/auto/config.mk

if {[variant_isset universal]} {
	set macosx_deployment_target 10.6
	configure.cc	/usr/bin/gcc-4.2
	configure.args-append	--with-macarchs="${universal_archs}"
	configure.cmd	XCODEFLAGS="VALID_ARCHS='${universal_archs}'" ./configure

	post-configure {
		set sdkpath	/Developer/SDKs/MacOSX${macosx_deployment_target}.sdk
		reinplace "s|-Wl,-syslibroot,${sdkpath}||g" ${configmk}
		reinplace "s|-isysroot ${sdkpath}||g" ${configmk}
	}
}

use_parallel_build	yes

variant perl description {Enable Perl scripting} {
	configure.args-append	--enable-perlinterp
}
variant python description {Enable Python scripting} {
	configure.args-append	--enable-pythoninterp
}
variant python3 description {Enable Python3 scripting} {
	configure.args-append	--enable-python3interp
}
variant ruby description {Enable Ruby scripting} {
	configure.args-append	--enable-rubyinterp
}
variant ruby19 description {Enable Ruby1.9 scripting} {
	configure.args-append	--enable-ruby19interp
}
variant tcl description {Enable Tcl scripting} {
	configure.args-append	--enable-tclinterp
}
variant cscope description {Enable source code browsing with cscope} {
	configure.args-append	--enable-cscope
}

post-extract {
	system "mv ${workpath}/splhack-macvim-* ${workpath}/macvim"
}

post-patch {
	reinplace \
		"s|^# VIM_APP_DIR=/Applications$|VIM_APP_DIR=${applications_dir}|" \
		${worksrcpath}/MacVim/mvim
}

set appPath "${destroot}${applications_dir}/MacVim.app/Contents"
set vimPath "${appPath}/Resources/vim"
set runtimePath "${vimPath}/runtime"

destroot {
	file copy ${worksrcpath}/MacVim/build/Release/MacVim.app ${destroot}${applications_dir}
	xinstall -m 755 ${worksrcpath}/MacVim/mvim ${destroot}${prefix}/bin
}

test.run			yes

variant standalone description {Enable standalonize} {
	depends_lib-append port:vimproc
	configure.env-append	PATH="/usr/bin:${env(PATH)}"
	if {[variant_isset perl]} {
		configure.env-append	VERSIONER_PERL_VERSION=5.10
		configure.args-delete	--enable-perlinterp
		configure.args-append	--enable-perlinterp=dynamic
	}
	if {[variant_isset python]} {
		configure.env-append	VERSIONER_PYTHON_VERSION=2.6
		configure.args-delete	--enable-pythoninterp
		configure.args-append	--enable-pythoninterp=dynamic
	}
	if {[variant_isset python3]} {
		configure.args-delete	--enable-python3interp
		configure.args-append	--enable-python3interp=dynamic
	}
	if {[variant_isset ruby]} {
		configure.args-delete	--enable-rubyinterp
		configure.args-append	--enable-rubyinterp=dynamic
	}
	if {[variant_isset ruby19]} {
		configure.args-delete	--enable-ruby19interp
		configure.args-append	--enable-ruby19interp=dynamic
	}
	pre-extract {
		if {[catch {system "port installed|grep -e \" ruby @.*(active)\" -e \" perl5 @.*(active)\" -e \" perl5.8 @.*(active)\""} result]} {} else {
			return -code error "perl or ruby is activated"
		}
	}
	post-configure {
		reinplace "s|^PERL_LIBS|#PERL_LIBS|" ${configmk}
		reinplace "s|^PYTHON_LIBS|#PYTHON_LIBS|" ${configmk}
		reinplace "s|^PYTHON3_LIBS|#PYTHON3_LIBS|" ${configmk}
		reinplace "s|^RUBY_LIBS|#RUBY_LIBS|" ${configmk}
		reinplace "s|^RUBY19_LIBS|#RUBY19_LIBS|" ${configmk}
	}
	post-destroot {
		# ctags
		file copy ${prefix}/bin/ctags ${appPath}/MacOS

		# vimproc.so
		set vimprocPath ${prefix}/share/vimproc/autoload
		file copy ${vimprocPath}/proc.so ${runtimePath}/autoload

		# dylibs
		foreach dylib {intl.8 iconv.2 migemo.1 ncurses.5 readline.6} {
			set libname [lindex [split ${dylib} .] 0]
			set instname "@executable_path/../Frameworks/lib${libname}.dylib"
			set origname "${prefix}/lib/lib${dylib}.dylib"
			foreach exec {MacOS/Vim} {
				system "install_name_tool \
					-change ${origname} ${instname} ${appPath}/${exec}"
			}
			if {[file type ${origname}] == "link"} {
				set realpath "${prefix}/lib/"
				append realpath [file readlink ${origname}]
			} else {
				set realpath ${origname}
			}
			xinstall -m 755 ${realpath} \
				${appPath}/Frameworks/lib${libname}.dylib
		}
		system "install_name_tool \
			-change ${prefix}/lib/libiconv.2.dylib \
			@executable_path/../Frameworks/libiconv.dylib \
			${appPath}/Frameworks/libintl.dylib"
		system "install_name_tool \
			-change ${prefix}/lib/libncurses.5.dylib \
			@executable_path/../Frameworks/libncurses.dylib \
			${appPath}/Frameworks/libreadline.dylib"

		# migemo dicts
		xinstall -d 755 ${runtimePath}/dict
		foreach mdict {han2zen.dat hira2kata.dat \
				migemo-dict roma2hira.dat zen2han.dat} {
			xinstall -m 644 ${prefix}/share/migemo/utf-8/${mdict} \
				${runtimePath}/dict
		}
	}
}
